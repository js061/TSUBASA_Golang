Before running this program:
	1. Install Golang, PostgreSQL to your machine.
	2. Use "go get -u github.com/lib/pq" to install "lib/pq" to interact with databse.
	3. Change const variable "user" and "password" in "program.go" to your own database username and password.
	4. Download Berkeley Earth data set from "http://berkeleyearth.org/data/", please choose one NetCDF file from "Daily Land (Experimental; 1880 â€“ Recent)", just pick one decade of data.
	5. Use "getinfo.py" to transfer the NetCDF file to a CSV file. The csv file will be named as "data.csv".

How to run the program:
	The program uses command line arguments to load parameters. The "program.go" can run by using "go run <fileName> <before> <numOfLocations> <thres> <granularity> <writeBlockSize> <readBlockSize> <ratio> <queryStart> <queryEnd> <parallel> <method> <inMem> <update>". <fileName> is the csv file that you transfer from the original NetCDF file. <before> is the length of time series. For *.nc files in Berkeley Earth data set, the length would be 3652. You can also set the value to a negtive value (e.g. -1) to load whole time series to the program. <numOfLocations> is how many time series you want to be loaded from the csv file to the program. Similarly, you can also set the parameter as -1 to load all time series from csv file to the program. <thres> is the thershold, which will determine if the edges in the graph are connected or not. I recommend to set it greater than 0.7. <granularity> is the size of basic window. For updating, this parameter would be the length of new coming data streams. <writeBlockSize> and <readBlockSize> are the size of batch when writing and reading data with PostgreSQL. They will be meaningless if you want to use memories to store all statistics. <ratio> is for approximation method. It denotes how many coefficients you want to keep for DFT. <queryStart> and <queryEnd> are for query. They denotes the index of query windows. For instance, queryStart = 0 and queryEnd = 2 means query window leangth = two basic windows. The length of basic window has already been set by <granularity>. The last four parameters are for different scenarios. You can only set <parallel>, <inMem>, and <update>to "t" or "f". "t" means true and "f" means false. You can only set <method> to "n", "t" or "d", which means naive implementation, TSUBASA, and approximation method respectively. For example, "go run program.go data.csv 2000 20 0.75 120 1000 1000 0.75 0 8 t t f f" means loading 20 time series with 2000 length to the database (inMem: f), then using parallel TSUBASA to do insertion and reading with batch in 1000 length. The basic window size is 120, and query from the first basic window to the seventh. 